// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type EventPayload interface {
	IsEventPayload()
}

type CreateTaskInput struct {
	Title string `json:"title"`
}

type Event struct {
	EventCategory EventCategory `json:"eventCategory"`
	EventType     EventType     `json:"eventType"`
	Payload       EventPayload  `json:"payload"`
}

type EventPomodoroPayload struct {
	ID               string        `json:"id"`
	State            PomodoroState `json:"state"`
	RemainingTimeSec int           `json:"remainingTimeSec"`
	ElapsedTimeSec   int           `json:"elapsedTimeSec"`
	TaskID           *string       `json:"taskId,omitempty"`
	Phase            PomodoroPhase `json:"phase"`
	PhaseCount       int           `json:"phaseCount"`
	PhaseDurationSec int           `json:"phaseDurationSec"`
}

func (EventPomodoroPayload) IsEventPayload() {}

type EventReceivedInput struct {
	EventCategory []EventCategory `json:"eventCategory,omitempty"`
}

type EventTaskPayload struct {
	ID    string `json:"id"`
	Title string `json:"title"`
}

func (EventTaskPayload) IsEventPayload() {}

type HealthStatus struct {
	Message   string    `json:"message"`
	Timestamp time.Time `json:"timestamp"`
}

type Mutation struct {
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type Pomodoro struct {
	ID               string        `json:"id"`
	State            PomodoroState `json:"state"`
	TaskID           string        `json:"taskId"`
	StartTime        time.Time     `json:"startTime"`
	Phase            PomodoroPhase `json:"phase"`
	PhaseCount       int           `json:"phaseCount"`
	RemainingTimeSec int           `json:"remainingTimeSec"`
	ElapsedTimeSec   int           `json:"elapsedTimeSec"`
	PhaseDurationSec int           `json:"phaseDurationSec"`
}

type Query struct {
}

type StartPomodoroInput struct {
	WorkDurationSec      int    `json:"workDurationSec"`
	BreakDurationSec     int    `json:"breakDurationSec"`
	LongBreakDurationSec int    `json:"longBreakDurationSec"`
	TaskID               string `json:"taskId"`
}

type Subscription struct {
}

type Task struct {
	ID        string    `json:"id"`
	Title     string    `json:"title"`
	CreatedAt time.Time `json:"createdAt"`
}

type TaskConnection struct {
	Edges      []*TaskEdge `json:"edges,omitempty"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type TaskEdge struct {
	Cursor string `json:"cursor"`
	Node   *Task  `json:"node,omitempty"`
}

type UpdateTaskInput struct {
	ID    string  `json:"id"`
	Title *string `json:"title,omitempty"`
}

type EventCategory string

const (
	EventCategoryPomodoro EventCategory = "POMODORO"
	EventCategoryTask     EventCategory = "TASK"
)

var AllEventCategory = []EventCategory{
	EventCategoryPomodoro,
	EventCategoryTask,
}

func (e EventCategory) IsValid() bool {
	switch e {
	case EventCategoryPomodoro, EventCategoryTask:
		return true
	}
	return false
}

func (e EventCategory) String() string {
	return string(e)
}

func (e *EventCategory) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventCategory", str)
	}
	return nil
}

func (e EventCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *EventCategory) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e EventCategory) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type EventType string

const (
	EventTypePomodoroStarted   EventType = "POMODORO_STARTED"
	EventTypePomodoroPaused    EventType = "POMODORO_PAUSED"
	EventTypePomodoroResumed   EventType = "POMODORO_RESUMED"
	EventTypePomodoroCompleted EventType = "POMODORO_COMPLETED"
	EventTypePomodoroStopped   EventType = "POMODORO_STOPPED"
	EventTypePomodoroTick      EventType = "POMODORO_TICK"
	EventTypeTaskCreated       EventType = "TASK_CREATED"
	EventTypeTaskUpdated       EventType = "TASK_UPDATED"
	EventTypeTaskDeleted       EventType = "TASK_DELETED"
)

var AllEventType = []EventType{
	EventTypePomodoroStarted,
	EventTypePomodoroPaused,
	EventTypePomodoroResumed,
	EventTypePomodoroCompleted,
	EventTypePomodoroStopped,
	EventTypePomodoroTick,
	EventTypeTaskCreated,
	EventTypeTaskUpdated,
	EventTypeTaskDeleted,
}

func (e EventType) IsValid() bool {
	switch e {
	case EventTypePomodoroStarted, EventTypePomodoroPaused, EventTypePomodoroResumed, EventTypePomodoroCompleted, EventTypePomodoroStopped, EventTypePomodoroTick, EventTypeTaskCreated, EventTypeTaskUpdated, EventTypeTaskDeleted:
		return true
	}
	return false
}

func (e EventType) String() string {
	return string(e)
}

func (e *EventType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventType", str)
	}
	return nil
}

func (e EventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *EventType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e EventType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PomodoroPhase string

const (
	PomodoroPhaseWork       PomodoroPhase = "WORK"
	PomodoroPhaseShortBreak PomodoroPhase = "SHORT_BREAK"
	PomodoroPhaseLongBreak  PomodoroPhase = "LONG_BREAK"
)

var AllPomodoroPhase = []PomodoroPhase{
	PomodoroPhaseWork,
	PomodoroPhaseShortBreak,
	PomodoroPhaseLongBreak,
}

func (e PomodoroPhase) IsValid() bool {
	switch e {
	case PomodoroPhaseWork, PomodoroPhaseShortBreak, PomodoroPhaseLongBreak:
		return true
	}
	return false
}

func (e PomodoroPhase) String() string {
	return string(e)
}

func (e *PomodoroPhase) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PomodoroPhase(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PomodoroPhase", str)
	}
	return nil
}

func (e PomodoroPhase) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PomodoroPhase) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PomodoroPhase) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PomodoroState string

const (
	PomodoroStateActive   PomodoroState = "ACTIVE"
	PomodoroStatePaused   PomodoroState = "PAUSED"
	PomodoroStateFinished PomodoroState = "FINISHED"
)

var AllPomodoroState = []PomodoroState{
	PomodoroStateActive,
	PomodoroStatePaused,
	PomodoroStateFinished,
}

func (e PomodoroState) IsValid() bool {
	switch e {
	case PomodoroStateActive, PomodoroStatePaused, PomodoroStateFinished:
		return true
	}
	return false
}

func (e PomodoroState) String() string {
	return string(e)
}

func (e *PomodoroState) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PomodoroState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PomodoroState", str)
	}
	return nil
}

func (e PomodoroState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PomodoroState) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PomodoroState) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
