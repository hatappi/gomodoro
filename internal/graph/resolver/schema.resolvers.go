package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"

	graph1 "github.com/hatappi/gomodoro/internal/graph"
)

// Noop is the resolver for the noop field.
func (r *mutationResolver) Noop(ctx context.Context) (*string, error) {
	response := "noop executed"
	return &response, nil
}

// Noop is the resolver for the noop field.
func (r *queryResolver) Noop(ctx context.Context) (*string, error) {
	response := "noop executed"
	return &response, nil
}

// Noop is the resolver for the noop field.
func (r *subscriptionResolver) Noop(ctx context.Context) (<-chan *string, error) {
	ch := make(chan *string)
	go func() {
		defer close(ch)
		response := "noop executed"
		ch <- &response
	}()
	return ch, nil
}

// Mutation returns graph1.MutationResolver implementation.
func (r *Resolver) Mutation() graph1.MutationResolver { return &mutationResolver{r} }

// Query returns graph1.QueryResolver implementation.
func (r *Resolver) Query() graph1.QueryResolver { return &queryResolver{r} }

// Subscription returns graph1.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph1.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
