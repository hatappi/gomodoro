// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// CreateTaskCreateTask includes the requested fields of the GraphQL type Task.
type CreateTaskCreateTask struct {
	Task `json:"-"`
}

// GetId returns CreateTaskCreateTask.Id, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetId() string { return v.Task.Id }

// GetTitle returns CreateTaskCreateTask.Title, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetTitle() string { return v.Task.Title }

// GetCreatedAt returns CreateTaskCreateTask.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetCreatedAt() time.Time { return v.Task.CreatedAt }

// GetCompleted returns CreateTaskCreateTask.Completed, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetCompleted() bool { return v.Task.Completed }

func (v *CreateTaskCreateTask) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateTaskCreateTask
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateTaskCreateTask = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Task)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateTaskCreateTask struct {
	Id string `json:"id"`

	Title string `json:"title"`

	CreatedAt time.Time `json:"createdAt"`

	Completed bool `json:"completed"`
}

func (v *CreateTaskCreateTask) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateTaskCreateTask) __premarshalJSON() (*__premarshalCreateTaskCreateTask, error) {
	var retval __premarshalCreateTaskCreateTask

	retval.Id = v.Task.Id
	retval.Title = v.Task.Title
	retval.CreatedAt = v.Task.CreatedAt
	retval.Completed = v.Task.Completed
	return &retval, nil
}

// CreateTaskResponse is returned by CreateTask on success.
type CreateTaskResponse struct {
	CreateTask CreateTaskCreateTask `json:"createTask"`
}

// GetCreateTask returns CreateTaskResponse.CreateTask, and is useful for accessing the field via an interface.
func (v *CreateTaskResponse) GetCreateTask() CreateTaskCreateTask { return v.CreateTask }

// DeleteTaskResponse is returned by DeleteTask on success.
type DeleteTaskResponse struct {
	DeleteTask bool `json:"deleteTask"`
}

// GetDeleteTask returns DeleteTaskResponse.DeleteTask, and is useful for accessing the field via an interface.
func (v *DeleteTaskResponse) GetDeleteTask() bool { return v.DeleteTask }

type EventCategory string

const (
	EventCategoryPomodoro EventCategory = "POMODORO"
	EventCategoryTask     EventCategory = "TASK"
)

var AllEventCategory = []EventCategory{
	EventCategoryPomodoro,
	EventCategoryTask,
}

type EventReceivedInput struct {
	EventCategory []EventCategory `json:"eventCategory"`
}

// GetEventCategory returns EventReceivedInput.EventCategory, and is useful for accessing the field via an interface.
func (v *EventReceivedInput) GetEventCategory() []EventCategory { return v.EventCategory }

type EventType string

const (
	EventTypePomodoroStarted   EventType = "POMODORO_STARTED"
	EventTypePomodoroPaused    EventType = "POMODORO_PAUSED"
	EventTypePomodoroResumed   EventType = "POMODORO_RESUMED"
	EventTypePomodoroCompleted EventType = "POMODORO_COMPLETED"
	EventTypePomodoroStopped   EventType = "POMODORO_STOPPED"
	EventTypePomodoroTick      EventType = "POMODORO_TICK"
	EventTypeTaskCreated       EventType = "TASK_CREATED"
	EventTypeTaskUpdated       EventType = "TASK_UPDATED"
	EventTypeTaskDeleted       EventType = "TASK_DELETED"
	EventTypeTaskCompleted     EventType = "TASK_COMPLETED"
)

var AllEventType = []EventType{
	EventTypePomodoroStarted,
	EventTypePomodoroPaused,
	EventTypePomodoroResumed,
	EventTypePomodoroCompleted,
	EventTypePomodoroStopped,
	EventTypePomodoroTick,
	EventTypeTaskCreated,
	EventTypeTaskUpdated,
	EventTypeTaskDeleted,
	EventTypeTaskCompleted,
}

// GetAllTasksResponse is returned by GetAllTasks on success.
type GetAllTasksResponse struct {
	Tasks GetAllTasksTasksTaskConnection `json:"tasks"`
}

// GetTasks returns GetAllTasksResponse.Tasks, and is useful for accessing the field via an interface.
func (v *GetAllTasksResponse) GetTasks() GetAllTasksTasksTaskConnection { return v.Tasks }

// GetAllTasksTasksTaskConnection includes the requested fields of the GraphQL type TaskConnection.
type GetAllTasksTasksTaskConnection struct {
	TotalCount int                                           `json:"totalCount"`
	Edges      []GetAllTasksTasksTaskConnectionEdgesTaskEdge `json:"edges"`
}

// GetTotalCount returns GetAllTasksTasksTaskConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *GetAllTasksTasksTaskConnection) GetTotalCount() int { return v.TotalCount }

// GetEdges returns GetAllTasksTasksTaskConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetAllTasksTasksTaskConnection) GetEdges() []GetAllTasksTasksTaskConnectionEdgesTaskEdge {
	return v.Edges
}

// GetAllTasksTasksTaskConnectionEdgesTaskEdge includes the requested fields of the GraphQL type TaskEdge.
type GetAllTasksTasksTaskConnectionEdgesTaskEdge struct {
	Node GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask `json:"node"`
}

// GetNode returns GetAllTasksTasksTaskConnectionEdgesTaskEdge.Node, and is useful for accessing the field via an interface.
func (v *GetAllTasksTasksTaskConnectionEdgesTaskEdge) GetNode() GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask {
	return v.Node
}

// GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask includes the requested fields of the GraphQL type Task.
type GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask struct {
	Task `json:"-"`
}

// GetId returns GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask.Id, and is useful for accessing the field via an interface.
func (v *GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask) GetId() string { return v.Task.Id }

// GetTitle returns GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask.Title, and is useful for accessing the field via an interface.
func (v *GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask) GetTitle() string { return v.Task.Title }

// GetCreatedAt returns GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask) GetCreatedAt() time.Time {
	return v.Task.CreatedAt
}

// GetCompleted returns GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask.Completed, and is useful for accessing the field via an interface.
func (v *GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask) GetCompleted() bool {
	return v.Task.Completed
}

func (v *GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Task)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask struct {
	Id string `json:"id"`

	Title string `json:"title"`

	CreatedAt time.Time `json:"createdAt"`

	Completed bool `json:"completed"`
}

func (v *GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask) __premarshalJSON() (*__premarshalGetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask, error) {
	var retval __premarshalGetAllTasksTasksTaskConnectionEdgesTaskEdgeNodeTask

	retval.Id = v.Task.Id
	retval.Title = v.Task.Title
	retval.CreatedAt = v.Task.CreatedAt
	retval.Completed = v.Task.Completed
	return &retval, nil
}

// GetTaskResponse is returned by GetTask on success.
type GetTaskResponse struct {
	Task GetTaskTask `json:"task"`
}

// GetTask returns GetTaskResponse.Task, and is useful for accessing the field via an interface.
func (v *GetTaskResponse) GetTask() GetTaskTask { return v.Task }

// GetTaskTask includes the requested fields of the GraphQL type Task.
type GetTaskTask struct {
	Task `json:"-"`
}

// GetId returns GetTaskTask.Id, and is useful for accessing the field via an interface.
func (v *GetTaskTask) GetId() string { return v.Task.Id }

// GetTitle returns GetTaskTask.Title, and is useful for accessing the field via an interface.
func (v *GetTaskTask) GetTitle() string { return v.Task.Title }

// GetCreatedAt returns GetTaskTask.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetTaskTask) GetCreatedAt() time.Time { return v.Task.CreatedAt }

// GetCompleted returns GetTaskTask.Completed, and is useful for accessing the field via an interface.
func (v *GetTaskTask) GetCompleted() bool { return v.Task.Completed }

func (v *GetTaskTask) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetTaskTask
		graphql.NoUnmarshalJSON
	}
	firstPass.GetTaskTask = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Task)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetTaskTask struct {
	Id string `json:"id"`

	Title string `json:"title"`

	CreatedAt time.Time `json:"createdAt"`

	Completed bool `json:"completed"`
}

func (v *GetTaskTask) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetTaskTask) __premarshalJSON() (*__premarshalGetTaskTask, error) {
	var retval __premarshalGetTaskTask

	retval.Id = v.Task.Id
	retval.Title = v.Task.Title
	retval.CreatedAt = v.Task.CreatedAt
	retval.Completed = v.Task.Completed
	return &retval, nil
}

// OnEventReceivedEventReceivedEvent includes the requested fields of the GraphQL type Event.
type OnEventReceivedEventReceivedEvent struct {
	EventCategory EventCategory                            `json:"eventCategory"`
	EventType     EventType                                `json:"eventType"`
	Payload       OnEventReceivedEventReceivedEventPayload `json:"-"`
}

// GetEventCategory returns OnEventReceivedEventReceivedEvent.EventCategory, and is useful for accessing the field via an interface.
func (v *OnEventReceivedEventReceivedEvent) GetEventCategory() EventCategory { return v.EventCategory }

// GetEventType returns OnEventReceivedEventReceivedEvent.EventType, and is useful for accessing the field via an interface.
func (v *OnEventReceivedEventReceivedEvent) GetEventType() EventType { return v.EventType }

// GetPayload returns OnEventReceivedEventReceivedEvent.Payload, and is useful for accessing the field via an interface.
func (v *OnEventReceivedEventReceivedEvent) GetPayload() OnEventReceivedEventReceivedEventPayload {
	return v.Payload
}

func (v *OnEventReceivedEventReceivedEvent) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*OnEventReceivedEventReceivedEvent
		Payload json.RawMessage `json:"payload"`
		graphql.NoUnmarshalJSON
	}
	firstPass.OnEventReceivedEventReceivedEvent = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Payload
		src := firstPass.Payload
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalOnEventReceivedEventReceivedEventPayload(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal OnEventReceivedEventReceivedEvent.Payload: %w", err)
			}
		}
	}
	return nil
}

type __premarshalOnEventReceivedEventReceivedEvent struct {
	EventCategory EventCategory `json:"eventCategory"`

	EventType EventType `json:"eventType"`

	Payload json.RawMessage `json:"payload"`
}

func (v *OnEventReceivedEventReceivedEvent) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *OnEventReceivedEventReceivedEvent) __premarshalJSON() (*__premarshalOnEventReceivedEventReceivedEvent, error) {
	var retval __premarshalOnEventReceivedEventReceivedEvent

	retval.EventCategory = v.EventCategory
	retval.EventType = v.EventType
	{

		dst := &retval.Payload
		src := v.Payload
		var err error
		*dst, err = __marshalOnEventReceivedEventReceivedEventPayload(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal OnEventReceivedEventReceivedEvent.Payload: %w", err)
		}
	}
	return &retval, nil
}

// OnEventReceivedEventReceivedEventPayload includes the requested fields of the GraphQL interface EventPayload.
//
// OnEventReceivedEventReceivedEventPayload is implemented by the following types:
// OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload
// OnEventReceivedEventReceivedEventPayloadEventTaskPayload
type OnEventReceivedEventReceivedEventPayload interface {
	implementsGraphQLInterfaceOnEventReceivedEventReceivedEventPayload()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload) implementsGraphQLInterfaceOnEventReceivedEventReceivedEventPayload() {
}
func (v *OnEventReceivedEventReceivedEventPayloadEventTaskPayload) implementsGraphQLInterfaceOnEventReceivedEventReceivedEventPayload() {
}

func __unmarshalOnEventReceivedEventReceivedEventPayload(b []byte, v *OnEventReceivedEventReceivedEventPayload) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "EventPomodoroPayload":
		*v = new(OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload)
		return json.Unmarshal(b, *v)
	case "EventTaskPayload":
		*v = new(OnEventReceivedEventReceivedEventPayloadEventTaskPayload)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing EventPayload.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for OnEventReceivedEventReceivedEventPayload: "%v"`, tn.TypeName)
	}
}

func __marshalOnEventReceivedEventReceivedEventPayload(v *OnEventReceivedEventReceivedEventPayload) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload:
		typename = "EventPomodoroPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload
		}{typename, v}
		return json.Marshal(result)
	case *OnEventReceivedEventReceivedEventPayloadEventTaskPayload:
		typename = "EventTaskPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*OnEventReceivedEventReceivedEventPayloadEventTaskPayload
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for OnEventReceivedEventReceivedEventPayload: "%T"`, v)
	}
}

// OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload includes the requested fields of the GraphQL type EventPomodoroPayload.
type OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload struct {
	Typename      string        `json:"__typename"`
	Id            string        `json:"id"`
	State         PomodoroState `json:"state"`
	RemainingTime int           `json:"remainingTime"`
	ElapsedTime   int           `json:"elapsedTime"`
	TaskId        string        `json:"taskId"`
	Phase         PomodoroPhase `json:"phase"`
	PhaseCount    int           `json:"phaseCount"`
}

// GetTypename returns OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload.Typename, and is useful for accessing the field via an interface.
func (v *OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload) GetTypename() string {
	return v.Typename
}

// GetId returns OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload.Id, and is useful for accessing the field via an interface.
func (v *OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload) GetId() string { return v.Id }

// GetState returns OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload.State, and is useful for accessing the field via an interface.
func (v *OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload) GetState() PomodoroState {
	return v.State
}

// GetRemainingTime returns OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload.RemainingTime, and is useful for accessing the field via an interface.
func (v *OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload) GetRemainingTime() int {
	return v.RemainingTime
}

// GetElapsedTime returns OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload.ElapsedTime, and is useful for accessing the field via an interface.
func (v *OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload) GetElapsedTime() int {
	return v.ElapsedTime
}

// GetTaskId returns OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload.TaskId, and is useful for accessing the field via an interface.
func (v *OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload) GetTaskId() string {
	return v.TaskId
}

// GetPhase returns OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload.Phase, and is useful for accessing the field via an interface.
func (v *OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload) GetPhase() PomodoroPhase {
	return v.Phase
}

// GetPhaseCount returns OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload.PhaseCount, and is useful for accessing the field via an interface.
func (v *OnEventReceivedEventReceivedEventPayloadEventPomodoroPayload) GetPhaseCount() int {
	return v.PhaseCount
}

// OnEventReceivedEventReceivedEventPayloadEventTaskPayload includes the requested fields of the GraphQL type EventTaskPayload.
type OnEventReceivedEventReceivedEventPayloadEventTaskPayload struct {
	Typename  string `json:"__typename"`
	Id        string `json:"id"`
	Title     string `json:"title"`
	Completed bool   `json:"completed"`
}

// GetTypename returns OnEventReceivedEventReceivedEventPayloadEventTaskPayload.Typename, and is useful for accessing the field via an interface.
func (v *OnEventReceivedEventReceivedEventPayloadEventTaskPayload) GetTypename() string {
	return v.Typename
}

// GetId returns OnEventReceivedEventReceivedEventPayloadEventTaskPayload.Id, and is useful for accessing the field via an interface.
func (v *OnEventReceivedEventReceivedEventPayloadEventTaskPayload) GetId() string { return v.Id }

// GetTitle returns OnEventReceivedEventReceivedEventPayloadEventTaskPayload.Title, and is useful for accessing the field via an interface.
func (v *OnEventReceivedEventReceivedEventPayloadEventTaskPayload) GetTitle() string { return v.Title }

// GetCompleted returns OnEventReceivedEventReceivedEventPayloadEventTaskPayload.Completed, and is useful for accessing the field via an interface.
func (v *OnEventReceivedEventReceivedEventPayloadEventTaskPayload) GetCompleted() bool {
	return v.Completed
}

// OnEventReceivedResponse is returned by OnEventReceived on success.
type OnEventReceivedResponse struct {
	EventReceived OnEventReceivedEventReceivedEvent `json:"eventReceived"`
}

// GetEventReceived returns OnEventReceivedResponse.EventReceived, and is useful for accessing the field via an interface.
func (v *OnEventReceivedResponse) GetEventReceived() OnEventReceivedEventReceivedEvent {
	return v.EventReceived
}

type PomodoroPhase string

const (
	PomodoroPhaseWork       PomodoroPhase = "WORK"
	PomodoroPhaseShortBreak PomodoroPhase = "SHORT_BREAK"
	PomodoroPhaseLongBreak  PomodoroPhase = "LONG_BREAK"
)

var AllPomodoroPhase = []PomodoroPhase{
	PomodoroPhaseWork,
	PomodoroPhaseShortBreak,
	PomodoroPhaseLongBreak,
}

type PomodoroState string

const (
	PomodoroStateActive   PomodoroState = "ACTIVE"
	PomodoroStatePaused   PomodoroState = "PAUSED"
	PomodoroStateFinished PomodoroState = "FINISHED"
)

var AllPomodoroState = []PomodoroState{
	PomodoroStateActive,
	PomodoroStatePaused,
	PomodoroStateFinished,
}

// Task includes the GraphQL fields of Task requested by the fragment Task.
type Task struct {
	Id        string    `json:"id"`
	Title     string    `json:"title"`
	CreatedAt time.Time `json:"createdAt"`
	Completed bool      `json:"completed"`
}

// GetId returns Task.Id, and is useful for accessing the field via an interface.
func (v *Task) GetId() string { return v.Id }

// GetTitle returns Task.Title, and is useful for accessing the field via an interface.
func (v *Task) GetTitle() string { return v.Title }

// GetCreatedAt returns Task.CreatedAt, and is useful for accessing the field via an interface.
func (v *Task) GetCreatedAt() time.Time { return v.CreatedAt }

// GetCompleted returns Task.Completed, and is useful for accessing the field via an interface.
func (v *Task) GetCompleted() bool { return v.Completed }

// __CreateTaskInput is used internally by genqlient
type __CreateTaskInput struct {
	Title string `json:"title"`
}

// GetTitle returns __CreateTaskInput.Title, and is useful for accessing the field via an interface.
func (v *__CreateTaskInput) GetTitle() string { return v.Title }

// __DeleteTaskInput is used internally by genqlient
type __DeleteTaskInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteTaskInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteTaskInput) GetId() string { return v.Id }

// __GetTaskInput is used internally by genqlient
type __GetTaskInput struct {
	Id string `json:"id"`
}

// GetId returns __GetTaskInput.Id, and is useful for accessing the field via an interface.
func (v *__GetTaskInput) GetId() string { return v.Id }

// __OnEventReceivedInput is used internally by genqlient
type __OnEventReceivedInput struct {
	Input EventReceivedInput `json:"input"`
}

// GetInput returns __OnEventReceivedInput.Input, and is useful for accessing the field via an interface.
func (v *__OnEventReceivedInput) GetInput() EventReceivedInput { return v.Input }

// The mutation executed by CreateTask.
const CreateTask_Operation = `
mutation CreateTask ($title: String!) {
	createTask(input: {title:$title}) {
		... Task
	}
}
fragment Task on Task {
	id
	title
	createdAt
	completed
}
`

func CreateTask(
	ctx_ context.Context,
	client_ graphql.Client,
	title string,
) (data_ *CreateTaskResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateTask",
		Query:  CreateTask_Operation,
		Variables: &__CreateTaskInput{
			Title: title,
		},
	}

	data_ = &CreateTaskResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by DeleteTask.
const DeleteTask_Operation = `
mutation DeleteTask ($id: ID!) {
	deleteTask(id: $id)
}
`

func DeleteTask(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *DeleteTaskResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DeleteTask",
		Query:  DeleteTask_Operation,
		Variables: &__DeleteTaskInput{
			Id: id,
		},
	}

	data_ = &DeleteTaskResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetAllTasks.
const GetAllTasks_Operation = `
query GetAllTasks {
	tasks {
		totalCount
		edges {
			node {
				... Task
			}
		}
	}
}
fragment Task on Task {
	id
	title
	createdAt
	completed
}
`

func GetAllTasks(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *GetAllTasksResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetAllTasks",
		Query:  GetAllTasks_Operation,
	}

	data_ = &GetAllTasksResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetTask.
const GetTask_Operation = `
query GetTask ($id: ID!) {
	task(id: $id) {
		... Task
	}
}
fragment Task on Task {
	id
	title
	createdAt
	completed
}
`

func GetTask(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (data_ *GetTaskResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetTask",
		Query:  GetTask_Operation,
		Variables: &__GetTaskInput{
			Id: id,
		},
	}

	data_ = &GetTaskResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The subscription executed by OnEventReceived.
const OnEventReceived_Operation = `
subscription OnEventReceived ($input: EventReceivedInput!) {
	eventReceived(input: $input) {
		eventCategory
		eventType
		payload {
			__typename
			... on EventPomodoroPayload {
				id
				state
				remainingTime
				elapsedTime
				taskId
				phase
				phaseCount
			}
			... on EventTaskPayload {
				id
				title
				completed
			}
		}
	}
}
`

// To unsubscribe, use [graphql.WebSocketClient.Unsubscribe]
func OnEventReceived(
	ctx_ context.Context,
	client_ graphql.WebSocketClient,
	input EventReceivedInput,
) (dataChan_ chan OnEventReceivedWsResponse, subscriptionID_ string, err_ error) {
	req_ := &graphql.Request{
		OpName: "OnEventReceived",
		Query:  OnEventReceived_Operation,
		Variables: &__OnEventReceivedInput{
			Input: input,
		},
	}

	dataChan_ = make(chan OnEventReceivedWsResponse)
	subscriptionID_, err_ = client_.Subscribe(req_, dataChan_, OnEventReceivedForwardData)

	return dataChan_, subscriptionID_, err_
}

type OnEventReceivedWsResponse graphql.BaseResponse[*OnEventReceivedResponse]

func OnEventReceivedForwardData(interfaceChan interface{}, jsonRawMsg json.RawMessage) error {
	var gqlResp graphql.Response
	var wsResp OnEventReceivedWsResponse
	err := json.Unmarshal(jsonRawMsg, &gqlResp)
	if err != nil {
		return err
	}
	if len(gqlResp.Errors) == 0 {
		err = json.Unmarshal(jsonRawMsg, &wsResp)
		if err != nil {
			return err
		}
	} else {
		wsResp.Errors = gqlResp.Errors
	}
	dataChan_, ok := interfaceChan.(chan OnEventReceivedWsResponse)
	if !ok {
		return errors.New("failed to cast interface into 'chan OnEventReceivedWsResponse'")
	}
	dataChan_ <- wsResp
	return nil
}
